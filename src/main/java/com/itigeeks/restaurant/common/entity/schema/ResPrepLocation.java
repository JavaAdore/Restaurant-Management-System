/*
 * Created on 24 Mar 2016 ( Time 16:42:55 ) Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite)

package com.itigeeks.restaurant.common.entity.schema;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.itigeeks.restaurant.common.entity.AbstractEntity;
// import javax.validation.constraints.* ;
// import org.hibernate.validator.constraints.* ;
import java.util.Date;
import java.util.List;

/**
 * Persistent class for entity stored in table "res_prep_location"
 * 
 * @author Telosys Tools Generator
 * 
 */

@Entity
@Table(name = "res_prep_location", catalog = "viceroy")
// Define named queries here
@NamedQueries({@NamedQuery(name = "ResPrepLocation.countAll",
    query = "SELECT COUNT(x) FROM ResPrepLocation x")})
public class ResPrepLocation extends AbstractEntity implements Serializable {
  private static final long serialVersionUID = 1L;

  // ----------------------------------------------------------------------
  // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
  // ----------------------------------------------------------------------
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  @Column(name = "id", nullable = false)
  private Long id;


  // ----------------------------------------------------------------------
  // ENTITY DATA FIELDS
  // ----------------------------------------------------------------------
  @Column(name = "prep_location_name", nullable = false, length = 150)
  private String prepLocationName;

  @Column(name = "is_active", nullable = false)
  private Boolean isActive;

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "last_update", nullable = false)
  private Date lastUpdate;

  // "userId" (column "user_id") is not defined by itself because used as FK in a link
  // "printerId" (column "printer_id") is not defined by itself because used as FK in a link
  // "lastUpdatedBy" (column "last_updated_by") is not defined by itself because used as FK in a
  // link


  // ----------------------------------------------------------------------
  // ENTITY LINKS ( RELATIONSHIP )
  // ----------------------------------------------------------------------
  @ManyToOne
  @JoinColumn(name = "last_updated_by", referencedColumnName = "id")
  private ResUser resUser2;

  @OneToMany(mappedBy = "resPrepLocation", targetEntity = ResProduct.class)
  private List<ResProduct> listOfResProduct;

  @ManyToOne
  @JoinColumn(name = "printer_id", referencedColumnName = "id")
  private ResPrinter resPrinter;

  @OneToMany(mappedBy = "resPrepLocation", targetEntity = ResOrderReplica.class)
  private List<ResOrderReplica> listOfResOrderReplica;

  @ManyToOne
  @JoinColumn(name = "user_id", referencedColumnName = "id")
  private ResUser resUser;

  @OneToMany(mappedBy = "resPrepLocation", targetEntity = ResOrder.class)
  private List<ResOrder> listOfResOrder;

  @OneToMany(mappedBy = "resPrepLocation", targetEntity = ResProductMisc.class)
  private List<ResProductMisc> listOfResProductMisc;

  @OneToMany(mappedBy = "resPrepLocation", targetEntity = ResTable.class)
  private List<ResTable> listOfResTable;


  // ----------------------------------------------------------------------
  // CONSTRUCTOR(S)
  // ----------------------------------------------------------------------
  public ResPrepLocation() {
    super();
  }

  // ----------------------------------------------------------------------
  // GETTER & SETTER FOR THE KEY FIELD
  // ----------------------------------------------------------------------
  public void setId(Long id) {
    this.id = id;
  }

  public Long getId() {
    return this.id;
  }

  // ----------------------------------------------------------------------
  // GETTERS & SETTERS FOR FIELDS
  // ----------------------------------------------------------------------
  // --- DATABASE MAPPING : prep_location_name ( VARCHAR )
  public void setPrepLocationName(String prepLocationName) {
    this.prepLocationName = prepLocationName;
  }

  public String getPrepLocationName() {
    return this.prepLocationName;
  }

  // --- DATABASE MAPPING : is_active ( BIT )
  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }

  public Boolean getIsActive() {
    return this.isActive;
  }

  // --- DATABASE MAPPING : last_update ( DATETIME )
  public void setLastUpdate(Date lastUpdate) {
    this.lastUpdate = lastUpdate;
  }

  public Date getLastUpdate() {
    return this.lastUpdate;
  }


  // ----------------------------------------------------------------------
  // GETTERS & SETTERS FOR LINKS
  // ----------------------------------------------------------------------
  public void setResUser2(ResUser resUser2) {
    this.resUser2 = resUser2;
  }

  public ResUser getResUser2() {
    return this.resUser2;
  }

  public void setListOfResProduct(List<ResProduct> listOfResProduct) {
    this.listOfResProduct = listOfResProduct;
  }

  public List<ResProduct> getListOfResProduct() {
    return this.listOfResProduct;
  }

  public void setResPrinter(ResPrinter resPrinter) {
    this.resPrinter = resPrinter;
  }

  public ResPrinter getResPrinter() {
    return this.resPrinter;
  }

  public void setListOfResOrderReplica(List<ResOrderReplica> listOfResOrderReplica) {
    this.listOfResOrderReplica = listOfResOrderReplica;
  }

  public List<ResOrderReplica> getListOfResOrderReplica() {
    return this.listOfResOrderReplica;
  }

  public void setResUser(ResUser resUser) {
    this.resUser = resUser;
  }

  public ResUser getResUser() {
    return this.resUser;
  }

  public void setListOfResOrder(List<ResOrder> listOfResOrder) {
    this.listOfResOrder = listOfResOrder;
  }

  public List<ResOrder> getListOfResOrder() {
    return this.listOfResOrder;
  }

  public void setListOfResProductMisc(List<ResProductMisc> listOfResProductMisc) {
    this.listOfResProductMisc = listOfResProductMisc;
  }

  public List<ResProductMisc> getListOfResProductMisc() {
    return this.listOfResProductMisc;
  }

  public void setListOfResTable(List<ResTable> listOfResTable) {
    this.listOfResTable = listOfResTable;
  }

  public List<ResTable> getListOfResTable() {
    return this.listOfResTable;
  }


  // ----------------------------------------------------------------------
  // toString METHOD
  // ----------------------------------------------------------------------
  public String toString() {
    StringBuffer sb = new StringBuffer();
    sb.append("[");
    sb.append(id);
    sb.append("]:");
    sb.append(prepLocationName);
    sb.append("|");
    sb.append(isActive);
    sb.append("|");
    sb.append(lastUpdate);
    return sb.toString();
  }

}
