/*
 * Created on 24 Mar 2016 ( Time 16:42:55 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.itigeeks.restaurant.common.entity.schema;

import java.io.Serializable;
import com.itigeeks.restaurant.common.entity.AbstractEntity;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "res_printer"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="res_printer", catalog="viceroy" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="ResPrinter.countAll", query="SELECT COUNT(x) FROM ResPrinter x" )
} )
public class ResPrinter extends AbstractEntity implements Serializable
{
    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Long      id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="printer_name", nullable=false, length=100)
    private String     printerName  ;

    @Column(name="ip_address", nullable=false, length=15)
    private String     ipAddress    ;

    @Column(name="is_active", nullable=false)
    private Boolean    isActive     ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="last_update", nullable=false)
    private Date       lastUpdate   ;

	// "lastUpdatedBy" (column "last_updated_by") is not defined by itself because used as FK in a link 
	// "printerModelId" (column "printer_model_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="last_updated_by", referencedColumnName="id")
    private ResUser resUser     ;

    @ManyToOne
    @JoinColumn(name="printer_model_id", referencedColumnName="id")
    private ResPrinterModel resPrinterModel;

    @OneToMany(mappedBy="resPrinter", targetEntity=ResAdditionalCompany.class)
    private List<ResAdditionalCompany> listOfResAdditionalCompany;

    @OneToMany(mappedBy="resPrinter", targetEntity=ResPrepLocation.class)
    private List<ResPrepLocation> listOfResPrepLocation;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public ResPrinter()
    {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Long id )
    {
        this.id = id ;
    }
    public Long getId()
    {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : printer_name ( VARCHAR ) 
    public void setPrinterName( String printerName )
    {
        this.printerName = printerName;
    }
    public String getPrinterName()
    {
        return this.printerName;
    }

    //--- DATABASE MAPPING : ip_address ( VARCHAR ) 
    public void setIpAddress( String ipAddress )
    {
        this.ipAddress = ipAddress;
    }
    public String getIpAddress()
    {
        return this.ipAddress;
    }

    //--- DATABASE MAPPING : is_active ( BIT ) 
    public void setIsActive( Boolean isActive )
    {
        this.isActive = isActive;
    }
    public Boolean getIsActive()
    {
        return this.isActive;
    }

    //--- DATABASE MAPPING : last_update ( DATETIME ) 
    public void setLastUpdate( Date lastUpdate )
    {
        this.lastUpdate = lastUpdate;
    }
    public Date getLastUpdate()
    {
        return this.lastUpdate;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setResUser( ResUser resUser )
    {
        this.resUser = resUser;
    }
    public ResUser getResUser()
    {
        return this.resUser;
    }

    public void setResPrinterModel( ResPrinterModel resPrinterModel )
    {
        this.resPrinterModel = resPrinterModel;
    }
    public ResPrinterModel getResPrinterModel()
    {
        return this.resPrinterModel;
    }

    public void setListOfResAdditionalCompany( List<ResAdditionalCompany> listOfResAdditionalCompany )
    {
        this.listOfResAdditionalCompany = listOfResAdditionalCompany;
    }
    public List<ResAdditionalCompany> getListOfResAdditionalCompany()
    {
        return this.listOfResAdditionalCompany;
    }

    public void setListOfResPrepLocation( List<ResPrepLocation> listOfResPrepLocation )
    {
        this.listOfResPrepLocation = listOfResPrepLocation;
    }
    public List<ResPrepLocation> getListOfResPrepLocation()
    {
        return this.listOfResPrepLocation;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(printerName);
        sb.append("|");
        sb.append(ipAddress);
        sb.append("|");
        sb.append(isActive);
        sb.append("|");
        sb.append(lastUpdate);
        return sb.toString(); 
    } 

}