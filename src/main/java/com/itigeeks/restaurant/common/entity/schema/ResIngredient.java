/*
 * Created on 24 Mar 2016 ( Time 16:42:54 ) Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite)

package com.itigeeks.restaurant.common.entity.schema;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.itigeeks.restaurant.common.entity.AbstractEntity;
// import javax.validation.constraints.* ;
// import org.hibernate.validator.constraints.* ;


/**
 * Persistent class for entity stored in table "res_ingredient"
 * 
 * @author Telosys Tools Generator
 * 
 */

@Entity
@Table(name = "res_ingredient", catalog = "viceroy")
// Define named queries here
@NamedQueries({@NamedQuery(name = "ResIngredient.countAll",
    query = "SELECT COUNT(x) FROM ResIngredient x")})
public class ResIngredient extends AbstractEntity implements Serializable {
  private static final long serialVersionUID = 1L;

  // ----------------------------------------------------------------------
  // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
  // ----------------------------------------------------------------------
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  @Column(name = "id", nullable = false)
  private Long id;


  // ----------------------------------------------------------------------
  // ENTITY DATA FIELDS
  // ----------------------------------------------------------------------
  @Column(name = "ingredient_name", nullable = false, length = 150)
  private String ingredientName;

  @Column(name = "price")
  private Integer price;

  @Column(name = "price_without")
  private Integer priceWithout;

  @Column(name = "is_active", nullable = false)
  private Boolean isActive;

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "last_update", nullable = false)
  private Date lastUpdate;

  @Column(name = "sequence_number", nullable = false)
  private Short sequenceNumber;

  // "lastUpdatedBy" (column "last_updated_by") is not defined by itself because used as FK in a
  // link


  // ----------------------------------------------------------------------
  // ENTITY LINKS ( RELATIONSHIP )
  // ----------------------------------------------------------------------
  @OneToMany(mappedBy = "resIngredient", targetEntity = ResProductIngredient.class)
  private List<ResProductIngredient> listOfResProductIngredient;

  @ManyToOne
  @JoinColumn(name = "last_updated_by", referencedColumnName = "id")
  private ResUser resUser;

  @OneToMany(mappedBy = "resIngredient", targetEntity = ResProductWithWithout.class)
  private List<ResProductWithWithout> listOfResProductWithWithout;


  // ----------------------------------------------------------------------
  // CONSTRUCTOR(S)
  // ----------------------------------------------------------------------
  public ResIngredient() {
    super();
  }

  // ----------------------------------------------------------------------
  // GETTER & SETTER FOR THE KEY FIELD
  // ----------------------------------------------------------------------
  public void setId(Long id) {
    this.id = id;
  }

  public Long getId() {
    return this.id;
  }

  // ----------------------------------------------------------------------
  // GETTERS & SETTERS FOR FIELDS
  // ----------------------------------------------------------------------
  // --- DATABASE MAPPING : ingredient_name ( VARCHAR )
  public void setIngredientName(String ingredientName) {
    this.ingredientName = ingredientName;
  }

  public String getIngredientName() {
    return this.ingredientName;
  }

  // --- DATABASE MAPPING : price ( DECIMAL )
  public void setPrice(Integer price) {
    this.price = price;
  }

  public Integer getPrice() {
    return this.price;
  }

  // --- DATABASE MAPPING : price_without ( DECIMAL )
  public void setPriceWithout(Integer priceWithout) {
    this.priceWithout = priceWithout;
  }

  public Integer getPriceWithout() {
    return this.priceWithout;
  }

  // --- DATABASE MAPPING : is_active ( BIT )
  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }

  public Boolean getIsActive() {
    return this.isActive;
  }

  // --- DATABASE MAPPING : last_update ( DATETIME )
  public void setLastUpdate(Date lastUpdate) {
    this.lastUpdate = lastUpdate;
  }

  public Date getLastUpdate() {
    return this.lastUpdate;
  }

  // --- DATABASE MAPPING : sequence_number ( SMALLINT )
  public void setSequenceNumber(Short sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }

  public Short getSequenceNumber() {
    return this.sequenceNumber;
  }


  // ----------------------------------------------------------------------
  // GETTERS & SETTERS FOR LINKS
  // ----------------------------------------------------------------------
  public void setListOfResProductIngredient(List<ResProductIngredient> listOfResProductIngredient) {
    this.listOfResProductIngredient = listOfResProductIngredient;
  }

  public List<ResProductIngredient> getListOfResProductIngredient() {
    return this.listOfResProductIngredient;
  }

  public void setResUser(ResUser resUser) {
    this.resUser = resUser;
  }

  public ResUser getResUser() {
    return this.resUser;
  }

  public void setListOfResProductWithWithout(List<ResProductWithWithout> listOfResProductWithWithout) {
    this.listOfResProductWithWithout = listOfResProductWithWithout;
  }

  public List<ResProductWithWithout> getListOfResProductWithWithout() {
    return this.listOfResProductWithWithout;
  }


  // ----------------------------------------------------------------------
  // toString METHOD
  // ----------------------------------------------------------------------
  public String toString() {
    StringBuffer sb = new StringBuffer();
    sb.append("[");
    sb.append(id);
    sb.append("]:");
    sb.append(ingredientName);
    sb.append("|");
    sb.append(price);
    sb.append("|");
    sb.append(priceWithout);
    sb.append("|");
    sb.append(isActive);
    sb.append("|");
    sb.append(lastUpdate);
    sb.append("|");
    sb.append(sequenceNumber);
    return sb.toString();
  }

}
