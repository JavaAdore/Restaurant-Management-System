/*
 * Created on 24 Mar 2016 ( Time 16:42:54 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.itigeeks.restaurant.common.entity.schema;

import java.io.Serializable;
import com.itigeeks.restaurant.common.entity.AbstractEntity;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.math.BigDecimal;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "res_deliver_charges"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="res_deliver_charges", catalog="viceroy" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="ResDeliverCharges.countAll", query="SELECT COUNT(x) FROM ResDeliverCharges x" )
} )
public class ResDeliverCharges extends AbstractEntity implements Serializable
{
    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Long    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="distance", length=50)
    private String     distance     ;

    @Column(name="amount")
    private BigDecimal amount       ;

    @Column(name="is_active", nullable=false)
    private Boolean    isActive     ;

    @Column(name="is_not_take_order", nullable=false)
    private Boolean    isNotTakeOrder ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------

    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public ResDeliverCharges()
    {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Long    id )
    {
        this.id = id ;
    }
    public Long getId()
    {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : distance ( VARCHAR ) 
    public void setDistance( String distance )
    {
        this.distance = distance;
    }
    public String getDistance()
    {
        return this.distance;
    }

    //--- DATABASE MAPPING : amount ( DECIMAL ) 
    public void setAmount( BigDecimal amount )
    {
        this.amount = amount;
    }
    public BigDecimal getAmount()
    {
        return this.amount;
    }

    //--- DATABASE MAPPING : is_active ( BIT ) 
    public void setIsActive( Boolean isActive )
    {
        this.isActive = isActive;
    }
    public Boolean getIsActive()
    {
        return this.isActive;
    }

    //--- DATABASE MAPPING : is_not_take_order ( BIT ) 
    public void setIsNotTakeOrder( Boolean isNotTakeOrder )
    {
        this.isNotTakeOrder = isNotTakeOrder;
    }
    public Boolean getIsNotTakeOrder()
    {
        return this.isNotTakeOrder;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(distance);
        sb.append("|");
        sb.append(amount);
        sb.append("|");
        sb.append(isActive);
        sb.append("|");
        sb.append(isNotTakeOrder);
        return sb.toString(); 
    } 

}