/*
 * Created on 24 Mar 2016 ( Time 16:42:53 ) Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite)

package com.itigeeks.restaurant.common.entity.schema;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.itigeeks.restaurant.common.entity.AbstractEntity;
// import javax.validation.constraints.* ;
// import org.hibernate.validator.constraints.* ;
import java.util.List;

/**
 * Persistent class for entity stored in table "res_customer_address"
 * 
 * @author Telosys Tools Generator
 * 
 */

@Entity
@Table(name = "res_customer_address", catalog = "viceroy")
// Define named queries here
@NamedQueries({@NamedQuery(name = "ResCustomerAddress.countAll",
    query = "SELECT COUNT(x) FROM ResCustomerAddress x")})
public class ResCustomerAddress extends AbstractEntity implements Serializable {
  private static final long serialVersionUID = 1L;

  // ----------------------------------------------------------------------
  // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
  // ----------------------------------------------------------------------
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  @Column(name = "id", nullable = false)
  private Long id;


  // ----------------------------------------------------------------------
  // ENTITY DATA FIELDS
  // ----------------------------------------------------------------------
  @Column(name = "house_no", length = 150)
  private String houseNo;

  @Column(name = "house_name", length = 150)
  private String houseName;

  @Column(name = "street", length = 150)
  private String street;

  @Column(name = "post_code", length = 150)
  private String postCode;

  @Column(name = "email", length = 50)
  private String email;

  @Column(name = "mobile", length = 50)
  private String mobile;

  @Column(name = "land_line", length = 50)
  private String landLine;

  // "townId" (column "town_id") is not defined by itself because used as FK in a link
  // "stateId" (column "state_id") is not defined by itself because used as FK in a link
  // "countryId" (column "country_id") is not defined by itself because used as FK in a link
  // "customerId" (column "customer_id") is not defined by itself because used as FK in a link


  // ----------------------------------------------------------------------
  // ENTITY LINKS ( RELATIONSHIP )
  // ----------------------------------------------------------------------
  @ManyToOne
  @JoinColumn(name = "state_id", referencedColumnName = "id")
  private ResState resState;

  @OneToMany(mappedBy = "resCustomerAddress", targetEntity = ResOrderReplica.class)
  private List<ResOrderReplica> listOfResOrderReplica;

  @ManyToOne
  @JoinColumn(name = "customer_id", referencedColumnName = "id")
  private ResCustomer resCustomer;

  @ManyToOne
  @JoinColumn(name = "town_id", referencedColumnName = "id")
  private ResCity resCity;

  @OneToMany(mappedBy = "resCustomerAddress", targetEntity = ResOrder.class)
  private List<ResOrder> listOfResOrder;

  @ManyToOne
  @JoinColumn(name = "country_id", referencedColumnName = "id")
  private ResCountry resCountry;


  // ----------------------------------------------------------------------
  // CONSTRUCTOR(S)
  // ----------------------------------------------------------------------
  public ResCustomerAddress() {
    super();
  }

  // ----------------------------------------------------------------------
  // GETTER & SETTER FOR THE KEY FIELD
  // ----------------------------------------------------------------------
  public void setId(Long id) {
    this.id = id;
  }

  public Long getId() {
    return this.id;
  }

  // ----------------------------------------------------------------------
  // GETTERS & SETTERS FOR FIELDS
  // ----------------------------------------------------------------------
  // --- DATABASE MAPPING : house_no ( VARCHAR )
  public void setHouseNo(String houseNo) {
    this.houseNo = houseNo;
  }

  public String getHouseNo() {
    return this.houseNo;
  }

  // --- DATABASE MAPPING : house_name ( VARCHAR )
  public void setHouseName(String houseName) {
    this.houseName = houseName;
  }

  public String getHouseName() {
    return this.houseName;
  }

  // --- DATABASE MAPPING : street ( VARCHAR )
  public void setStreet(String street) {
    this.street = street;
  }

  public String getStreet() {
    return this.street;
  }

  // --- DATABASE MAPPING : post_code ( VARCHAR )
  public void setPostCode(String postCode) {
    this.postCode = postCode;
  }

  public String getPostCode() {
    return this.postCode;
  }

  // --- DATABASE MAPPING : email ( VARCHAR )
  public void setEmail(String email) {
    this.email = email;
  }

  public String getEmail() {
    return this.email;
  }

  // --- DATABASE MAPPING : mobile ( VARCHAR )
  public void setMobile(String mobile) {
    this.mobile = mobile;
  }

  public String getMobile() {
    return this.mobile;
  }

  // --- DATABASE MAPPING : land_line ( VARCHAR )
  public void setLandLine(String landLine) {
    this.landLine = landLine;
  }

  public String getLandLine() {
    return this.landLine;
  }


  // ----------------------------------------------------------------------
  // GETTERS & SETTERS FOR LINKS
  // ----------------------------------------------------------------------
  public void setResState(ResState resState) {
    this.resState = resState;
  }

  public ResState getResState() {
    return this.resState;
  }

  public void setListOfResOrderReplica(List<ResOrderReplica> listOfResOrderReplica) {
    this.listOfResOrderReplica = listOfResOrderReplica;
  }

  public List<ResOrderReplica> getListOfResOrderReplica() {
    return this.listOfResOrderReplica;
  }

  public void setResCustomer(ResCustomer resCustomer) {
    this.resCustomer = resCustomer;
  }

  public ResCustomer getResCustomer() {
    return this.resCustomer;
  }

  public void setResCity(ResCity resCity) {
    this.resCity = resCity;
  }

  public ResCity getResCity() {
    return this.resCity;
  }

  public void setListOfResOrder(List<ResOrder> listOfResOrder) {
    this.listOfResOrder = listOfResOrder;
  }

  public List<ResOrder> getListOfResOrder() {
    return this.listOfResOrder;
  }

  public void setResCountry(ResCountry resCountry) {
    this.resCountry = resCountry;
  }

  public ResCountry getResCountry() {
    return this.resCountry;
  }


  // ----------------------------------------------------------------------
  // toString METHOD
  // ----------------------------------------------------------------------
  public String toString() {
    StringBuffer sb = new StringBuffer();
    sb.append("[");
    sb.append(id);
    sb.append("]:");
    sb.append(houseNo);
    sb.append("|");
    sb.append(houseName);
    sb.append("|");
    sb.append(street);
    sb.append("|");
    sb.append(postCode);
    sb.append("|");
    sb.append(email);
    sb.append("|");
    sb.append(mobile);
    sb.append("|");
    sb.append(landLine);
    return sb.toString();
  }

}
