/*
 * Created on 24 Mar 2016 ( Time 16:42:57 ) Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite)

package com.itigeeks.restaurant.common.entity.schema;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.itigeeks.restaurant.common.entity.AbstractEntity;
// import javax.validation.constraints.* ;
// import org.hibernate.validator.constraints.* ;
import java.util.List;

/**
 * Persistent class for entity stored in table "res_user_type"
 * 
 * @author Telosys Tools Generator
 * 
 */

@Entity
@Table(name = "res_user_type", catalog = "viceroy")
// Define named queries here
@NamedQueries({@NamedQuery(name = "ResUserType.countAll",
    query = "SELECT COUNT(x) FROM ResUserType x")})
public class ResUserType extends AbstractEntity implements Serializable {
  private static final long serialVersionUID = 1L;

  // ----------------------------------------------------------------------
  // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
  // ----------------------------------------------------------------------
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  @Column(name = "id", nullable = false)
  private Long id;


  // ----------------------------------------------------------------------
  // ENTITY DATA FIELDS
  // ----------------------------------------------------------------------
  @Column(name = "user_type", nullable = false, length = 150)
  private String userType;

  @Column(name = "top_color", nullable = false, length = 9)
  private String topColor;

  @Column(name = "bottom_color", nullable = false, length = 9)
  private String bottomColor;



  // ----------------------------------------------------------------------
  // ENTITY LINKS ( RELATIONSHIP )
  // ----------------------------------------------------------------------
  @OneToMany(mappedBy = "resUserType", targetEntity = ResUser.class)
  private List<ResUser> listOfResUser;


  // ----------------------------------------------------------------------
  // CONSTRUCTOR(S)
  // ----------------------------------------------------------------------
  public ResUserType() {
    super();
  }

  // ----------------------------------------------------------------------
  // GETTER & SETTER FOR THE KEY FIELD
  // ----------------------------------------------------------------------
  public void setId(Long id) {
    this.id = id;
  }

  public Long getId() {
    return this.id;
  }

  // ----------------------------------------------------------------------
  // GETTERS & SETTERS FOR FIELDS
  // ----------------------------------------------------------------------
  // --- DATABASE MAPPING : user_type ( VARCHAR )
  public void setUserType(String userType) {
    this.userType = userType;
  }

  public String getUserType() {
    return this.userType;
  }

  // --- DATABASE MAPPING : top_color ( VARCHAR )
  public void setTopColor(String topColor) {
    this.topColor = topColor;
  }

  public String getTopColor() {
    return this.topColor;
  }

  // --- DATABASE MAPPING : bottom_color ( VARCHAR )
  public void setBottomColor(String bottomColor) {
    this.bottomColor = bottomColor;
  }

  public String getBottomColor() {
    return this.bottomColor;
  }


  // ----------------------------------------------------------------------
  // GETTERS & SETTERS FOR LINKS
  // ----------------------------------------------------------------------
  public void setListOfResUser(List<ResUser> listOfResUser) {
    this.listOfResUser = listOfResUser;
  }

  public List<ResUser> getListOfResUser() {
    return this.listOfResUser;
  }


  // ----------------------------------------------------------------------
  // toString METHOD
  // ----------------------------------------------------------------------
  public String toString() {
    StringBuffer sb = new StringBuffer();
    sb.append("[");
    sb.append(id);
    sb.append("]:");
    sb.append(userType);
    sb.append("|");
    sb.append(topColor);
    sb.append("|");
    sb.append(bottomColor);
    return sb.toString();
  }

}
