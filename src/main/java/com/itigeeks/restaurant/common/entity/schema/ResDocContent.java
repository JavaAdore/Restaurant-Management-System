/*
 * Created on 24 Mar 2016 ( Time 16:42:54 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.itigeeks.restaurant.common.entity.schema;

import java.io.Serializable;
import com.itigeeks.restaurant.common.entity.AbstractEntity;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "res_doc_content"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="res_doc_content", catalog="viceroy" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="ResDocContent.countAll", query="SELECT COUNT(x) FROM ResDocContent x" )
} )
public class ResDocContent extends AbstractEntity implements Serializable
{
    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Long       id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="doc_name", nullable=false, length=255)
    private String     docName      ;

    @Column(name="pagetitle", nullable=false, length=255)
    private String     pagetitle    ;

    @Column(name="stub", nullable=false, length=255)
    private String     stub         ;

    @Column(name="content", nullable=false)
    private String     content      ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modified_date")
    private Date       modifiedDate ;

    @Column(name="sort_order", nullable=false)
    private Long       sortOrder    ;

    @Column(name="is_active", nullable=false)
    private Boolean    isActive     ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created_date", nullable=false)
    private Date       createdDate  ;

    @Column(name="is_page", nullable=false)
    private Boolean    isPage       ;

	// "parentId" (column "parent_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="parent_id", referencedColumnName="id")
    private ResDocContent resDocContent;

    @OneToMany(mappedBy="resDocContent", targetEntity=ResDocContent.class)
    private List<ResDocContent> listOfResDocContent;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public ResDocContent()
    {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Long id )
    {
        this.id = id ;
    }
    public Long getId()
    {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : doc_name ( VARCHAR ) 
    public void setDocName( String docName )
    {
        this.docName = docName;
    }
    public String getDocName()
    {
        return this.docName;
    }

    //--- DATABASE MAPPING : pagetitle ( VARCHAR ) 
    public void setPagetitle( String pagetitle )
    {
        this.pagetitle = pagetitle;
    }
    public String getPagetitle()
    {
        return this.pagetitle;
    }

    //--- DATABASE MAPPING : stub ( VARCHAR ) 
    public void setStub( String stub )
    {
        this.stub = stub;
    }
    public String getStub()
    {
        return this.stub;
    }

    //--- DATABASE MAPPING : content ( LONGTEXT ) 
    public void setContent( String content )
    {
        this.content = content;
    }
    public String getContent()
    {
        return this.content;
    }

    //--- DATABASE MAPPING : modified_date ( DATETIME ) 
    public void setModifiedDate( Date modifiedDate )
    {
        this.modifiedDate = modifiedDate;
    }
    public Date getModifiedDate()
    {
        return this.modifiedDate;
    }

    //--- DATABASE MAPPING : sort_order ( BIGINT ) 
    public void setSortOrder( Long sortOrder )
    {
        this.sortOrder = sortOrder;
    }
    public Long getSortOrder()
    {
        return this.sortOrder;
    }

    //--- DATABASE MAPPING : is_active ( BIT ) 
    public void setIsActive( Boolean isActive )
    {
        this.isActive = isActive;
    }
    public Boolean getIsActive()
    {
        return this.isActive;
    }

    //--- DATABASE MAPPING : created_date ( DATETIME ) 
    public void setCreatedDate( Date createdDate )
    {
        this.createdDate = createdDate;
    }
    public Date getCreatedDate()
    {
        return this.createdDate;
    }

    //--- DATABASE MAPPING : is_page ( BIT ) 
    public void setIsPage( Boolean isPage )
    {
        this.isPage = isPage;
    }
    public Boolean getIsPage()
    {
        return this.isPage;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setResDocContent( ResDocContent resDocContent )
    {
        this.resDocContent = resDocContent;
    }
    public ResDocContent getResDocContent()
    {
        return this.resDocContent;
    }

    public void setListOfResDocContent( List<ResDocContent> listOfResDocContent )
    {
        this.listOfResDocContent = listOfResDocContent;
    }
    public List<ResDocContent> getListOfResDocContent()
    {
        return this.listOfResDocContent;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(docName);
        sb.append("|");
        sb.append(pagetitle);
        sb.append("|");
        sb.append(stub);
        // attribute 'content' not usable (type = String Long Text)
        sb.append("|");
        sb.append(modifiedDate);
        sb.append("|");
        sb.append(sortOrder);
        sb.append("|");
        sb.append(isActive);
        sb.append("|");
        sb.append(createdDate);
        sb.append("|");
        sb.append(isPage);
        return sb.toString(); 
    } 

}