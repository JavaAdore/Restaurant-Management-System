/*
 * Created on 24 Mar 2016 ( Time 16:42:54 ) Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite)

package com.itigeeks.restaurant.common.entity.schema;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.itigeeks.restaurant.common.entity.AbstractEntity;
// import javax.validation.constraints.* ;
// import org.hibernate.validator.constraints.* ;
import java.util.Date;
import java.util.List;

/**
 * Persistent class for entity stored in table "res_message"
 * 
 * @author Telosys Tools Generator
 * 
 */

@Entity
@Table(name = "res_message", catalog = "viceroy")
// Define named queries here
@NamedQueries({@NamedQuery(name = "ResMessage.countAll",
    query = "SELECT COUNT(x) FROM ResMessage x")})
public class ResMessage extends AbstractEntity implements Serializable {
  private static final long serialVersionUID = 1L;

  // ----------------------------------------------------------------------
  // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
  // ----------------------------------------------------------------------
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  @Column(name = "id", nullable = false)
  private Long id;


  // ----------------------------------------------------------------------
  // ENTITY DATA FIELDS
  // ----------------------------------------------------------------------
  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "send_date", nullable = false)
  private Date sendDate;

  @Column(name = "message", nullable = false, length = 1000)
  private String message;

  @Column(name = "subject", nullable = false, length = 100)
  private String subject;

  @Column(name = "is_active", nullable = false)
  private Boolean isActive;

  // "parentId" (column "parent_id") is not defined by itself because used as FK in a link
  // "sender" (column "sender") is not defined by itself because used as FK in a link
  // "receiver" (column "receiver") is not defined by itself because used as FK in a link


  // ----------------------------------------------------------------------
  // ENTITY LINKS ( RELATIONSHIP )
  // ----------------------------------------------------------------------
  @OneToMany(mappedBy = "resMessage", targetEntity = ResMessage.class)
  private List<ResMessage> listOfResMessage;

  @OneToMany(mappedBy = "resMessage", targetEntity = ResMessageStatus.class)
  private List<ResMessageStatus> listOfResMessageStatus;

  @ManyToOne
  @JoinColumn(name = "parent_id", referencedColumnName = "id")
  private ResMessage resMessage;

  @ManyToOne
  @JoinColumn(name = "receiver", referencedColumnName = "id")
  private ResUser resUser;

  @ManyToOne
  @JoinColumn(name = "sender", referencedColumnName = "id")
  private ResUser resUser2;


  // ----------------------------------------------------------------------
  // CONSTRUCTOR(S)
  // ----------------------------------------------------------------------
  public ResMessage() {
    super();
  }

  // ----------------------------------------------------------------------
  // GETTER & SETTER FOR THE KEY FIELD
  // ----------------------------------------------------------------------
  public void setId(Long id) {
    this.id = id;
  }

  public Long getId() {
    return this.id;
  }

  // ----------------------------------------------------------------------
  // GETTERS & SETTERS FOR FIELDS
  // ----------------------------------------------------------------------
  // --- DATABASE MAPPING : send_date ( DATETIME )
  public void setSendDate(Date sendDate) {
    this.sendDate = sendDate;
  }

  public Date getSendDate() {
    return this.sendDate;
  }

  // --- DATABASE MAPPING : message ( VARCHAR )
  public void setMessage(String message) {
    this.message = message;
  }

  public String getMessage() {
    return this.message;
  }

  // --- DATABASE MAPPING : subject ( VARCHAR )
  public void setSubject(String subject) {
    this.subject = subject;
  }

  public String getSubject() {
    return this.subject;
  }

  // --- DATABASE MAPPING : is_active ( BIT )
  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }

  public Boolean getIsActive() {
    return this.isActive;
  }


  // ----------------------------------------------------------------------
  // GETTERS & SETTERS FOR LINKS
  // ----------------------------------------------------------------------
  public void setListOfResMessage(List<ResMessage> listOfResMessage) {
    this.listOfResMessage = listOfResMessage;
  }

  public List<ResMessage> getListOfResMessage() {
    return this.listOfResMessage;
  }

  public void setListOfResMessageStatus(List<ResMessageStatus> listOfResMessageStatus) {
    this.listOfResMessageStatus = listOfResMessageStatus;
  }

  public List<ResMessageStatus> getListOfResMessageStatus() {
    return this.listOfResMessageStatus;
  }

  public void setResMessage(ResMessage resMessage) {
    this.resMessage = resMessage;
  }

  public ResMessage getResMessage() {
    return this.resMessage;
  }

  public void setResUser(ResUser resUser) {
    this.resUser = resUser;
  }

  public ResUser getResUser() {
    return this.resUser;
  }

  public void setResUser2(ResUser resUser2) {
    this.resUser2 = resUser2;
  }

  public ResUser getResUser2() {
    return this.resUser2;
  }


  // ----------------------------------------------------------------------
  // toString METHOD
  // ----------------------------------------------------------------------
  public String toString() {
    StringBuffer sb = new StringBuffer();
    sb.append("[");
    sb.append(id);
    sb.append("]:");
    sb.append(sendDate);
    sb.append("|");
    sb.append(message);
    sb.append("|");
    sb.append(subject);
    sb.append("|");
    sb.append(isActive);
    return sb.toString();
  }

}
