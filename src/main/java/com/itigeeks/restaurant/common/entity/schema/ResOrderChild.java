/*
 * Created on 24 Mar 2016 ( Time 16:42:55 ) Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite)

package com.itigeeks.restaurant.common.entity.schema;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.itigeeks.restaurant.common.entity.AbstractEntity;
// import javax.validation.constraints.* ;
// import org.hibernate.validator.constraints.* ;


/**
 * Persistent class for entity stored in table "res_order_child"
 * 
 * @author Telosys Tools Generator
 * 
 */

@Entity
@Table(name = "res_order_child", catalog = "viceroy")
// Define named queries here
@NamedQueries({@NamedQuery(name = "ResOrderChild.countAll",
    query = "SELECT COUNT(x) FROM ResOrderChild x")})
public class ResOrderChild extends AbstractEntity implements Serializable {
  private static final long serialVersionUID = 1L;

  // ----------------------------------------------------------------------
  // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
  // ----------------------------------------------------------------------
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  @Column(name = "id", nullable = false)
  private Long id;


  // ----------------------------------------------------------------------
  // ENTITY DATA FIELDS
  // ----------------------------------------------------------------------
  @Column(name = "quantity", nullable = false)
  private Short quantity;

  @Column(name = "amount", nullable = false)
  private Integer amount;

  @Column(name = "is_active", nullable = false)
  private Boolean isActive;

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "last_update", nullable = false)
  private Date lastUpdate;

  @Column(name = "is_print_que", nullable = false)
  private Boolean isPrintQue;

  @Column(name = "is_add_on", nullable = false)
  private Boolean isAddOn;

  @Column(name = "has_send_to_kitchen", nullable = false)
  private Boolean hasSendToKitchen;

  @Column(name = "que_sequence_number", nullable = false)
  private Short queSequenceNumber;

  @Column(name = "updated_quantity")
  private Short updatedQuantity;

  // "quantityTypeId" (column "quantity_type_id") is not defined by itself because used as FK in a
  // link
  // "promotionProductParentId" (column "promotion_product_parent_id") is not defined by itself
  // because used as FK in a link
  // "orderId" (column "order_id") is not defined by itself because used as FK in a link
  // "productId" (column "product_id") is not defined by itself because used as FK in a link
  // "statusId" (column "status_id") is not defined by itself because used as FK in a link
  // "lastUpdatedBy" (column "last_updated_by") is not defined by itself because used as FK in a
  // link


  // ----------------------------------------------------------------------
  // ENTITY LINKS ( RELATIONSHIP )
  // ----------------------------------------------------------------------
  @ManyToOne
  @JoinColumn(name = "status_id", referencedColumnName = "id")
  private ResOrderStatus resOrderStatus;

  @ManyToOne
  @JoinColumn(name = "quantity_type_id", referencedColumnName = "id")
  private ResQuantityType resQuantityType;

  @ManyToOne
  @JoinColumn(name = "last_updated_by", referencedColumnName = "id")
  private ResUser resUser;

  @OneToMany(mappedBy = "resOrderChild", targetEntity = ResOrderProductAddon.class)
  private List<ResOrderProductAddon> listOfResOrderProductAddon;

  @ManyToOne
  @JoinColumn(name = "order_id", referencedColumnName = "id")
  private ResOrder resOrder;

  @ManyToOne
  @JoinColumn(name = "product_id", referencedColumnName = "id")
  private ResProduct resProduct;

  @OneToMany(mappedBy = "resOrderChild", targetEntity = ResProductMisc.class)
  private List<ResProductMisc> listOfResProductMisc;

  @OneToMany(mappedBy = "resOrderChild", targetEntity = ResSpecialInstructions.class)
  private List<ResSpecialInstructions> listOfResSpecialInstructions;

  @ManyToOne
  @JoinColumn(name = "promotion_product_parent_id", referencedColumnName = "id")
  private ResProduct resProduct2;

  @OneToMany(mappedBy = "resOrderChild", targetEntity = ResProductWithWithout.class)
  private List<ResProductWithWithout> listOfResProductWithWithout;


  // ----------------------------------------------------------------------
  // CONSTRUCTOR(S)
  // ----------------------------------------------------------------------
  public ResOrderChild() {
    super();
  }

  // ----------------------------------------------------------------------
  // GETTER & SETTER FOR THE KEY FIELD
  // ----------------------------------------------------------------------
  public void setId(Long id) {
    this.id = id;
  }

  public Long getId() {
    return this.id;
  }

  // ----------------------------------------------------------------------
  // GETTERS & SETTERS FOR FIELDS
  // ----------------------------------------------------------------------
  // --- DATABASE MAPPING : quantity ( SMALLINT )
  public void setQuantity(Short quantity) {
    this.quantity = quantity;
  }

  public Short getQuantity() {
    return this.quantity;
  }

  // --- DATABASE MAPPING : amount ( DECIMAL )
  public void setAmount(Integer amount) {
    this.amount = amount;
  }

  public Integer getAmount() {
    return this.amount;
  }

  // --- DATABASE MAPPING : is_active ( BIT )
  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }

  public Boolean getIsActive() {
    return this.isActive;
  }

  // --- DATABASE MAPPING : last_update ( DATETIME )
  public void setLastUpdate(Date lastUpdate) {
    this.lastUpdate = lastUpdate;
  }

  public Date getLastUpdate() {
    return this.lastUpdate;
  }

  // --- DATABASE MAPPING : is_print_que ( BIT )
  public void setIsPrintQue(Boolean isPrintQue) {
    this.isPrintQue = isPrintQue;
  }

  public Boolean getIsPrintQue() {
    return this.isPrintQue;
  }

  // --- DATABASE MAPPING : is_add_on ( BIT )
  public void setIsAddOn(Boolean isAddOn) {
    this.isAddOn = isAddOn;
  }

  public Boolean getIsAddOn() {
    return this.isAddOn;
  }

  // --- DATABASE MAPPING : has_send_to_kitchen ( BIT )
  public void setHasSendToKitchen(Boolean hasSendToKitchen) {
    this.hasSendToKitchen = hasSendToKitchen;
  }

  public Boolean getHasSendToKitchen() {
    return this.hasSendToKitchen;
  }

  // --- DATABASE MAPPING : que_sequence_number ( SMALLINT )
  public void setQueSequenceNumber(Short queSequenceNumber) {
    this.queSequenceNumber = queSequenceNumber;
  }

  public Short getQueSequenceNumber() {
    return this.queSequenceNumber;
  }

  // --- DATABASE MAPPING : updated_quantity ( SMALLINT )
  public void setUpdatedQuantity(Short updatedQuantity) {
    this.updatedQuantity = updatedQuantity;
  }

  public Short getUpdatedQuantity() {
    return this.updatedQuantity;
  }


  // ----------------------------------------------------------------------
  // GETTERS & SETTERS FOR LINKS
  // ----------------------------------------------------------------------
  public void setResOrderStatus(ResOrderStatus resOrderStatus) {
    this.resOrderStatus = resOrderStatus;
  }

  public ResOrderStatus getResOrderStatus() {
    return this.resOrderStatus;
  }

  public void setResQuantityType(ResQuantityType resQuantityType) {
    this.resQuantityType = resQuantityType;
  }

  public ResQuantityType getResQuantityType() {
    return this.resQuantityType;
  }

  public void setResUser(ResUser resUser) {
    this.resUser = resUser;
  }

  public ResUser getResUser() {
    return this.resUser;
  }

  public void setListOfResOrderProductAddon(List<ResOrderProductAddon> listOfResOrderProductAddon) {
    this.listOfResOrderProductAddon = listOfResOrderProductAddon;
  }

  public List<ResOrderProductAddon> getListOfResOrderProductAddon() {
    return this.listOfResOrderProductAddon;
  }

  public void setResOrder(ResOrder resOrder) {
    this.resOrder = resOrder;
  }

  public ResOrder getResOrder() {
    return this.resOrder;
  }

  public void setResProduct(ResProduct resProduct) {
    this.resProduct = resProduct;
  }

  public ResProduct getResProduct() {
    return this.resProduct;
  }

  public void setListOfResProductMisc(List<ResProductMisc> listOfResProductMisc) {
    this.listOfResProductMisc = listOfResProductMisc;
  }

  public List<ResProductMisc> getListOfResProductMisc() {
    return this.listOfResProductMisc;
  }

  public void setListOfResSpecialInstructions(
      List<ResSpecialInstructions> listOfResSpecialInstructions) {
    this.listOfResSpecialInstructions = listOfResSpecialInstructions;
  }

  public List<ResSpecialInstructions> getListOfResSpecialInstructions() {
    return this.listOfResSpecialInstructions;
  }

  public void setResProduct2(ResProduct resProduct2) {
    this.resProduct2 = resProduct2;
  }

  public ResProduct getResProduct2() {
    return this.resProduct2;
  }

  public void setListOfResProductWithWithout(List<ResProductWithWithout> listOfResProductWithWithout) {
    this.listOfResProductWithWithout = listOfResProductWithWithout;
  }

  public List<ResProductWithWithout> getListOfResProductWithWithout() {
    return this.listOfResProductWithWithout;
  }


  // ----------------------------------------------------------------------
  // toString METHOD
  // ----------------------------------------------------------------------
  public String toString() {
    StringBuffer sb = new StringBuffer();
    sb.append("[");
    sb.append(id);
    sb.append("]:");
    sb.append(quantity);
    sb.append("|");
    sb.append(amount);
    sb.append("|");
    sb.append(isActive);
    sb.append("|");
    sb.append(lastUpdate);
    sb.append("|");
    sb.append(isPrintQue);
    sb.append("|");
    sb.append(isAddOn);
    sb.append("|");
    sb.append(hasSendToKitchen);
    sb.append("|");
    sb.append(queSequenceNumber);
    sb.append("|");
    sb.append(updatedQuantity);
    return sb.toString();
  }

}
